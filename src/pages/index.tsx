import React, { useRef, useState } from "react";
import { GetStaticProps } from "next";
import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { getPosts } from "@/lib/posts";
import { Post } from "@/types";
import CreatePost from "@/components/CreatePost";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import PostsDetails from "@/components/PostsDetails";
import PostsList from "@/components/PostsList";

const inter = Inter({ subsets: ["latin"] });

type Props = {
  fetchedPosts: Post[];
};

type Refs = { [key: string]: React.RefObject<HTMLLIElement> };

const Home = ({ fetchedPosts }: Props) => {
  const [posts, setPosts] = useState<Post[]>(fetchedPosts);
  const [selectedPost, setSelectedPost] = useState<Post | null>(null);

  const refs = useRef<Refs>(
    posts.reduce((acc: Refs, value) => {
      acc[value.id] = React.createRef<HTMLLIElement>();
      return acc;
    }, {})
  );

  const updateRefs = (newPost: Post) => {
    refs.current[newPost.id] = React.createRef<HTMLLIElement>();
  };

  const handlePostSelection = (post: Post) => {
    setSelectedPost(post);
    refs.current[post.id].current?.scrollIntoView({
      behavior: "smooth",
      block: "end",
    });
  };

  const handleAddPost = (newPost: Post) => {
    setPosts((prevPosts) => [...prevPosts, newPost]);
    updateRefs(newPost);
  };

  const handlePostRemoved = (post: Post) => {
    setPosts((prevPosts) => prevPosts.filter((p) => p.id !== post.id));
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="app">
        <Header />
        <main className="main">
          <div className="left-column">
            <PostsList
              posts={posts}
              selectedPost={selectedPost}
              onSelectPost={handlePostSelection}
            />
          </div>
          <div className="main-content">
            <CreatePost onAddPost={handleAddPost} />
            <PostsDetails
              refs={refs.current}
              posts={posts}
              selectedPost={selectedPost}
              onPostSelected={handlePostSelection}
              onPostRemoved={handlePostRemoved}
            />
          </div>
          <div className="right-column"></div>
        </main>
        <Footer />
      </div>
    </>
  );
};

export const getStaticProps: GetStaticProps<Props> = async () => {
  const fetchedPosts = await getPosts();

  return {
    props: { fetchedPosts },
  };
};

export default Home;
